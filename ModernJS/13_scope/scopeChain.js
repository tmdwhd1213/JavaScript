/*
함수는 중첩될 수 있다. 함수의 지역 스코프도 중첩될 수 있다.
이는 스코프가 함수의 중첩에 의해 계층적 구조를 갖는다는 의미이다.
외부 함수의 지역 스코프를 중첩 함수의 상위 스코프라 한다.
p.195 그림 13-3 참조.
모든 스코프는 하나의 계층적 구조(scope chain)로 연결되며 모든 지역 스코프의 최상위는 전역 스코프다.
변수를 참조할 때 JS 엔진은 스코프 체인을 통해 변수를 참조하는 코드의 스코프에서 시작하여 상위 스코프 방향으로 이동하며 선언된 변수를 검색한다.

스코프 체인은 물리적인 실체로 존재한다. JS 엔진은 코드를 실행하기에 앞서
위 그림과 유사한 자료구조인 렉시컬 환경을 실제로 생성한다.
변수 선언이 실행되면 변수 식별자가 이 자료구조(렉시컬 환경)에 key로 등록되고, 변수 할당이 일어나면 이 자료구조의 변수 식별자에 해당하는 값을 변경한다.

JS 엔진은 스코프 체인을 따라 변수를 참조하는 코드의 스코프에서 시작해서 상위 스코프 방향으로 이동하며 선언된 변수를 검색한다.
절대 하위 스코프로 내려가면서 식별자를 검색하는 일은 없다.
이는 상위 스코프에서 유효한 변수는 하위 스코프에서 자유롭게 참조할 수 있지만,
하위 스코프에서 유효한 변수를 상위 스코프에서 참조할 수 없다는 것을 의미한다.
*/

// 3.2. 스코프 체인에 의한 함수 검색
// 전역 함수
function foo() {
    console.log('global function foo');
}

function bar() {
    // 중첩 함수
    function foo() {
        console.log('local function foo');
    }

    foo();      // local function foo
}

bar();

// 함수 선언문으로 함수를 정의하면 런타임 이전에 함수 객체가 먼저 생성된다. 
// 그리고 JS 엔진은 함수 이름과 동일한 이름의 식별자를 암묵적으로 선언하고 생성된 함수 객체를 할당한다.
// 함수는 식별자에 함수 객체가 할당된 것 외에는 일반 변수와 같다.
// 따라서 스코프는 "식별자를 검색하는 규칙"이라고 표현하는 것이 적절하다.
