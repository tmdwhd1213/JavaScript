var x = 1;

function foo() {
    var x = 10;
    bar();              // bar()함수의 x = 1의 값을 가져온다.
}

function bar() {
    console.log(x);     // 전역에서 선언된 함수. 전역 스코프이므로 전역 변수 x = 1을 사용한다. 
}

foo();
bar();

// 위 예제의 실행 결과는 bar 함수의 상위 스코프가 무엇인지에 따라 결정된다.
// 1. 함수를 어디서 호출했는지  (동적 스코프)
// 2. 함수를 어디서 정의했는지  (정적, 렉시컬 스코프)   --> JS는 렉시컬 스코프를 따른다.
/*
JS는 렉시컬 스코프를 따르므로 함수를 어디서 정의했는지에 따라 상위 스코프를 결정한다.
함수가 호출된 위치는 상위 스코프 결정에 어떠한 영향도 주지 않는다.
즉, 함수의 상위 스코프는 언제나 자신이 정의된 스코프이다.

이처럼 함수의 상위 스코프는 함수 정의가 실행될 때 정적으로 결정된다. 함수 정의(함수 선언문 or 함수 표현삭)가 실행되어
생성된 함수 객체는 이렇게 결정된 상위 스코프를 기억한다.
함수가 호출될 때마다 함수의 상위 스코프를 참조할 필요가 있기 때문이다.
*/