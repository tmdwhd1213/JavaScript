// 객체: 상태를 나타내는 프로퍼티, 동작을 나타내는 메서드를 하나의 논리적인 단위로 묶은 복합적인 자료구조.
// 동작을 나타내는 메서드는 자신이 속한 객체의 상태, 즉 프로퍼티를 참조하고 변경할 수 있어야 한다.
// 이때 메서드가 자신이 속한 객체의 프로퍼티를 참조하려면 먼저 자신이 속한 객체를 가리키는 식별자를 참조할 수 있어야 한다.
const circle = {
  //프로퍼티
  radius: 5,
  // 메서드
  getDiameter() {
    // 자신이 속한 메서드나 프로퍼티를 참조하려면 자신이 속한 객체인 circle을 참조할 수 있어야 한다.
    return 2 * circle.radius;
  },
};

console.log(circle.getDiameter()); // 10
// 위 예제의 객체 리터럴은 circle 변수에 할당되기 직전에 평가된다. 따라서 getDiameter 메서드가 호출되는 시점에는
// 이미 객체 리터럴의 평가가 완료되어 객체가 생성되었고 circle 식별자에 생성된 객체가 할당된 이후다.
// 따라서 메서드 내부에서 circle 식별자를 참조할 수 있다.
function Circle(radius) {
  // 이 시점에는 생성자 함수 자신이 생성할 인스턴스를 가리키는 식별자를 알 수 없다.
  this.radius = radius; //????.radius = radius;
}

Circle.prototype.getDiameter = function () {
  // 이 시점에는 생성자 함수 자신이 생성할 인스턴스를 가리키는 식별자를 알 수 없다.
  return 2 * this.radius; // return 2 * ????.radius;
};

// 생성자 함수로 인스턴스를 생성하려면 먼저 생성자 함수를 정의해야 한다.
const circle1 = new Circle(5);
console.log(circle1.getDiameter()); // 10

// 생성자 함수에 의한 객체 생성 방식
// 1. 생성자 함수를 정의
// 2. new 연산자와 함께 생성자 함수를 호출하는 단계

// this는 자기 참조 변수이다. 자신이 속한 객체 or 자신이 생성할 인스턴스의 프로퍼티나 메서드를 참조.
// this는 JS 엔진에 의해 암묵적으로 생성되며, 코드 어디서든 참조할 수 있다.
// arguments 객체와 this가 암묵적으로 함수 내부에 전달된다.
// 함수 내부에서 arguments 객체를 지역 변수처럼 사용할 수 있는 것처럼 this도 지역 변수처럼 사용할 수 있다.
// 단, this가 가리키는 값, 즉 this 바인딩은 함수 호출 방식에 의해 동적으로 결정된다.

// 바인딩이란 식별자와 값을 연결하는 과정을 의미한다.
// 예를 들어, 변수 선언은 변수 이름과 확보된 메모리 공간의 주소를 바인딩하는 것이다.
// this바인딩은 this(식별자 역할을 함)와 가리킬 객체를 바인딩하는 것이다.
