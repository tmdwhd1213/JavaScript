// Javascript는 객체(object)기반 언어이며, JS를 구성하는 거의 "모든 것"이 객체이다.
// 원시 값을 제외한 나머지 값(함수, 배열, 정규 표현식 등)은 모두 객체이다.
// 원시 타입은 단 하나의 값을 가짐. but, 객체 타입은 다양한 타입의 값을 하나의 단뒤로 구성한 복합적 자료구조이다.
// 객체 0개 이상의 프로퍼티로 구성된 집합, 프로퍼티(property)는 key와 value로 구성된다.
// 프로퍼티가 함수일 경우 이를 구분하기 위해 메서드(method)라 부른다.
var counter = {
    num: 0,                     // property : 객체의 상태를 나타내는 값(data)
    increase: function() {      // method   : 프로퍼티(상태 데이터)를 참조하고 조작할 수 있는 동작(behavior)
        this.num++;
    }
};

// C, JAVA 같은 클래스 기반 객체지향 언어는 클래스를 사전에 정의하고 필요한 시점에 new 연산자와 함께 생성자를 호출하여 인스턴스를 생성하는 방식으로
// 객체를 생성한다.
// 인스턴스 : 클래스에 의해 생성되어 메모리에 저장된 실체.
// 클래스 : 인스턴스를 생성하기 위한 템플릿의 역할을 한다.

/* 
JS는 프로토타입 기반 객체지향 언어로 다양한 객체 생성 방법을 지원한다.
1. 객체 리터럴 : 객체를 생성하기 위한 표기법, 중괄호{} 내에 0개 이상의 프로퍼티를 정의한다. 변수에 할당되는 시점에 엔진이 해석한다.
2. object 생성자 함수
3. 생성자 함수
4. Object.create 메서드
5. 클래스(ES6)
*/

// 리터럴 : 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용하여 값을 생성하는 표기법.
var person = {
    name : 'Oh',
    sayHello : function() {
        console.log(`Hello! My name is ${this.name}.`);
    }
};

console.log(typeof person); // object
console.log(person);    // {name : "oh", sayHello: f}

var empty = {};     // 빈 객체
console.log(typeof empty);  // object
// 객체 리터럴의 {}는 코드 블록을 의미하지 않는다.
// 코드블록을 닫는 중괄호{} 뒤에는 그 자체에 종결의 의미를 지니고 있어 ;을 붙이지 않지만,
// 위에 설명한 것처럼 코드 블록이 아니기 때문에 객체 리터럴의 {}에는 ;을 붙여야 한다.